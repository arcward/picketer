# coding: utf-8

"""
    Ticketmaster Discovery API

    Swagger spec based on Ticketmaster Discovery API

    OpenAPI spec version: 1.0.0
    Contact: git@edward.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Field(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, lenient=None, duration_field=None, range_duration_field=None):
        """
        Field - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lenient': 'bool',
            'duration_field': 'Field',
            'range_duration_field': 'Duration'
        }

        self.attribute_map = {
            'lenient': 'lenient',
            'duration_field': 'durationField',
            'range_duration_field': 'rangeDurationField'
        }

        self._lenient = lenient
        self._duration_field = duration_field
        self._range_duration_field = range_duration_field

    @property
    def lenient(self):
        """
        Gets the lenient of this Field.

        :return: The lenient of this Field.
        :rtype: bool
        """
        return self._lenient

    @lenient.setter
    def lenient(self, lenient):
        """
        Sets the lenient of this Field.

        :param lenient: The lenient of this Field.
        :type: bool
        """

        self._lenient = lenient

    @property
    def duration_field(self):
        """
        Gets the duration_field of this Field.

        :return: The duration_field of this Field.
        :rtype: Field
        """
        return self._duration_field

    @duration_field.setter
    def duration_field(self, duration_field):
        """
        Sets the duration_field of this Field.

        :param duration_field: The duration_field of this Field.
        :type: Field
        """

        self._duration_field = duration_field

    @property
    def range_duration_field(self):
        """
        Gets the range_duration_field of this Field.

        :return: The range_duration_field of this Field.
        :rtype: Duration
        """
        return self._range_duration_field

    @range_duration_field.setter
    def range_duration_field(self, range_duration_field):
        """
        Sets the range_duration_field of this Field.

        :param range_duration_field: The range_duration_field of this Field.
        :type: Duration
        """

        self._range_duration_field = range_duration_field

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
