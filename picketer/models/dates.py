# coding: utf-8

"""
    Ticketmaster Discovery API

    Swagger spec based on Ticketmaster Discovery API

    OpenAPI spec version: 1.0.0
    Contact: git@edward.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Dates(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, start=None, end=None, access=None, status=None, timezone=None, span_multiple_days=None):
        """
        Dates - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'start': 'Time',
            'end': 'EndTime',
            'access': 'Access',
            'status': 'Status',
            'timezone': 'str',
            'span_multiple_days': 'bool'
        }

        self.attribute_map = {
            'start': 'start',
            'end': 'end',
            'access': 'access',
            'status': 'status',
            'timezone': 'timezone',
            'span_multiple_days': 'spanMultipleDays'
        }

        self._start = start
        self._end = end
        self._access = access
        self._status = status
        self._timezone = timezone
        self._span_multiple_days = span_multiple_days

    @property
    def start(self):
        """
        Gets the start of this Dates.

        :return: The start of this Dates.
        :rtype: Time
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this Dates.

        :param start: The start of this Dates.
        :type: Time
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this Dates.

        :return: The end of this Dates.
        :rtype: EndTime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this Dates.

        :param end: The end of this Dates.
        :type: EndTime
        """

        self._end = end

    @property
    def access(self):
        """
        Gets the access of this Dates.

        :return: The access of this Dates.
        :rtype: Access
        """
        return self._access

    @access.setter
    def access(self, access):
        """
        Sets the access of this Dates.

        :param access: The access of this Dates.
        :type: Access
        """

        self._access = access

    @property
    def status(self):
        """
        Gets the status of this Dates.

        :return: The status of this Dates.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Dates.

        :param status: The status of this Dates.
        :type: Status
        """

        self._status = status

    @property
    def timezone(self):
        """
        Gets the timezone of this Dates.

        :return: The timezone of this Dates.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this Dates.

        :param timezone: The timezone of this Dates.
        :type: str
        """

        self._timezone = timezone

    @property
    def span_multiple_days(self):
        """
        Gets the span_multiple_days of this Dates.

        :return: The span_multiple_days of this Dates.
        :rtype: bool
        """
        return self._span_multiple_days

    @span_multiple_days.setter
    def span_multiple_days(self, span_multiple_days):
        """
        Sets the span_multiple_days of this Dates.

        :param span_multiple_days: The span_multiple_days of this Dates.
        :type: bool
        """

        self._span_multiple_days = span_multiple_days

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Dates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
