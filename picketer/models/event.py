# coding: utf-8

"""
    Ticketmaster Discovery API

    Swagger spec based on Ticketmaster Discovery API

    OpenAPI spec version: 1.0.0
    Contact: git@edward.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, type=None, distance=None, units=None, location=None, locale=None, description=None, url=None, images=None, dates=None, sales=None, info=None, please_note=None, price_ranges=None, promoter=None, seatmap=None, classifications=None, place=None, external_links=None, test=None, additional_info=None, links=None, embedded=None):
        """
        Event - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'type': 'str',
            'distance': 'float',
            'units': 'str',
            'location': 'Location',
            'locale': 'str',
            'description': 'str',
            'url': 'str',
            'images': 'list[Image]',
            'dates': 'Dates',
            'sales': 'Sales',
            'info': 'str',
            'please_note': 'str',
            'price_ranges': 'list[Price]',
            'promoter': 'Promoter',
            'seatmap': 'SeatMap',
            'classifications': 'list[Classification]',
            'place': 'Place',
            'external_links': 'list[Link]',
            'test': 'bool',
            'additional_info': 'str',
            'links': 'Links',
            'embedded': 'Embedded'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'distance': 'distance',
            'units': 'units',
            'location': 'location',
            'locale': 'locale',
            'description': 'description',
            'url': 'url',
            'images': 'images',
            'dates': 'dates',
            'sales': 'sales',
            'info': 'info',
            'please_note': 'pleaseNote',
            'price_ranges': 'priceRanges',
            'promoter': 'promoter',
            'seatmap': 'seatmap',
            'classifications': 'classifications',
            'place': 'place',
            'external_links': 'externalLinks',
            'test': 'test',
            'additional_info': 'additionalInfo',
            'links': '_links',
            'embedded': '_embedded'
        }

        self._id = id
        self._name = name
        self._type = type
        self._distance = distance
        self._units = units
        self._location = location
        self._locale = locale
        self._description = description
        self._url = url
        self._images = images
        self._dates = dates
        self._sales = sales
        self._info = info
        self._please_note = please_note
        self._price_ranges = price_ranges
        self._promoter = promoter
        self._seatmap = seatmap
        self._classifications = classifications
        self._place = place
        self._external_links = external_links
        self._test = test
        self._additional_info = additional_info
        self._links = links
        self._embedded = embedded

    @property
    def id(self):
        """
        Gets the id of this Event.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event.

        :param id: The id of this Event.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Event.

        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Event.

        :param name: The name of this Event.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this Event.

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Event.

        :param type: The type of this Event.
        :type: str
        """

        self._type = type

    @property
    def distance(self):
        """
        Gets the distance of this Event.

        :return: The distance of this Event.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """
        Sets the distance of this Event.

        :param distance: The distance of this Event.
        :type: float
        """

        self._distance = distance

    @property
    def units(self):
        """
        Gets the units of this Event.

        :return: The units of this Event.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """
        Sets the units of this Event.

        :param units: The units of this Event.
        :type: str
        """

        self._units = units

    @property
    def location(self):
        """
        Gets the location of this Event.

        :return: The location of this Event.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Event.

        :param location: The location of this Event.
        :type: Location
        """

        self._location = location

    @property
    def locale(self):
        """
        Gets the locale of this Event.

        :return: The locale of this Event.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this Event.

        :param locale: The locale of this Event.
        :type: str
        """

        self._locale = locale

    @property
    def description(self):
        """
        Gets the description of this Event.

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Event.

        :param description: The description of this Event.
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """
        Gets the url of this Event.

        :return: The url of this Event.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Event.

        :param url: The url of this Event.
        :type: str
        """

        self._url = url

    @property
    def images(self):
        """
        Gets the images of this Event.

        :return: The images of this Event.
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this Event.

        :param images: The images of this Event.
        :type: list[Image]
        """

        self._images = images

    @property
    def dates(self):
        """
        Gets the dates of this Event.

        :return: The dates of this Event.
        :rtype: Dates
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """
        Sets the dates of this Event.

        :param dates: The dates of this Event.
        :type: Dates
        """

        self._dates = dates

    @property
    def sales(self):
        """
        Gets the sales of this Event.

        :return: The sales of this Event.
        :rtype: Sales
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """
        Sets the sales of this Event.

        :param sales: The sales of this Event.
        :type: Sales
        """

        self._sales = sales

    @property
    def info(self):
        """
        Gets the info of this Event.

        :return: The info of this Event.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this Event.

        :param info: The info of this Event.
        :type: str
        """

        self._info = info

    @property
    def please_note(self):
        """
        Gets the please_note of this Event.

        :return: The please_note of this Event.
        :rtype: str
        """
        return self._please_note

    @please_note.setter
    def please_note(self, please_note):
        """
        Sets the please_note of this Event.

        :param please_note: The please_note of this Event.
        :type: str
        """

        self._please_note = please_note

    @property
    def price_ranges(self):
        """
        Gets the price_ranges of this Event.

        :return: The price_ranges of this Event.
        :rtype: list[Price]
        """
        return self._price_ranges

    @price_ranges.setter
    def price_ranges(self, price_ranges):
        """
        Sets the price_ranges of this Event.

        :param price_ranges: The price_ranges of this Event.
        :type: list[Price]
        """

        self._price_ranges = price_ranges

    @property
    def promoter(self):
        """
        Gets the promoter of this Event.

        :return: The promoter of this Event.
        :rtype: Promoter
        """
        return self._promoter

    @promoter.setter
    def promoter(self, promoter):
        """
        Sets the promoter of this Event.

        :param promoter: The promoter of this Event.
        :type: Promoter
        """

        self._promoter = promoter

    @property
    def seatmap(self):
        """
        Gets the seatmap of this Event.

        :return: The seatmap of this Event.
        :rtype: SeatMap
        """
        return self._seatmap

    @seatmap.setter
    def seatmap(self, seatmap):
        """
        Sets the seatmap of this Event.

        :param seatmap: The seatmap of this Event.
        :type: SeatMap
        """

        self._seatmap = seatmap

    @property
    def classifications(self):
        """
        Gets the classifications of this Event.

        :return: The classifications of this Event.
        :rtype: list[Classification]
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """
        Sets the classifications of this Event.

        :param classifications: The classifications of this Event.
        :type: list[Classification]
        """

        self._classifications = classifications

    @property
    def place(self):
        """
        Gets the place of this Event.

        :return: The place of this Event.
        :rtype: Place
        """
        return self._place

    @place.setter
    def place(self, place):
        """
        Sets the place of this Event.

        :param place: The place of this Event.
        :type: Place
        """

        self._place = place

    @property
    def external_links(self):
        """
        Gets the external_links of this Event.

        :return: The external_links of this Event.
        :rtype: list[Link]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """
        Sets the external_links of this Event.

        :param external_links: The external_links of this Event.
        :type: list[Link]
        """

        self._external_links = external_links

    @property
    def test(self):
        """
        Gets the test of this Event.

        :return: The test of this Event.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """
        Sets the test of this Event.

        :param test: The test of this Event.
        :type: bool
        """

        self._test = test

    @property
    def additional_info(self):
        """
        Gets the additional_info of this Event.

        :return: The additional_info of this Event.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """
        Sets the additional_info of this Event.

        :param additional_info: The additional_info of this Event.
        :type: str
        """

        self._additional_info = additional_info

    @property
    def links(self):
        """
        Gets the links of this Event.

        :return: The links of this Event.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Event.

        :param links: The links of this Event.
        :type: Links
        """

        self._links = links

    @property
    def embedded(self):
        """
        Gets the embedded of this Event.

        :return: The embedded of this Event.
        :rtype: Embedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """
        Sets the embedded of this Event.

        :param embedded: The embedded of this Event.
        :type: Embedded
        """

        self._embedded = embedded

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
