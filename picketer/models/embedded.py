# coding: utf-8

"""
    Ticketmaster Discovery API

    Swagger spec based on Ticketmaster Discovery API

    OpenAPI spec version: 1.0.0
    Contact: git@edward.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Embedded(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, venues=None, events=None, attractions=None, classifications=None):
        """
        Embedded - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'venues': 'list[Venue]',
            'events': 'list[Event]',
            'attractions': 'list[Attraction]',
            'classifications': 'list[Classification]'
        }

        self.attribute_map = {
            'venues': 'venues',
            'events': 'events',
            'attractions': 'attractions',
            'classifications': 'classifications'
        }

        self._venues = venues
        self._events = events
        self._attractions = attractions
        self._classifications = classifications

    @property
    def venues(self):
        """
        Gets the venues of this Embedded.

        :return: The venues of this Embedded.
        :rtype: list[Venue]
        """
        return self._venues

    @venues.setter
    def venues(self, venues):
        """
        Sets the venues of this Embedded.

        :param venues: The venues of this Embedded.
        :type: list[Venue]
        """

        self._venues = venues

    @property
    def events(self):
        """
        Gets the events of this Embedded.

        :return: The events of this Embedded.
        :rtype: list[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this Embedded.

        :param events: The events of this Embedded.
        :type: list[Event]
        """

        self._events = events

    @property
    def attractions(self):
        """
        Gets the attractions of this Embedded.

        :return: The attractions of this Embedded.
        :rtype: list[Attraction]
        """
        return self._attractions

    @attractions.setter
    def attractions(self, attractions):
        """
        Sets the attractions of this Embedded.

        :param attractions: The attractions of this Embedded.
        :type: list[Attraction]
        """

        self._attractions = attractions

    @property
    def classifications(self):
        """
        Gets the classifications of this Embedded.

        :return: The classifications of this Embedded.
        :rtype: list[Classification]
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """
        Sets the classifications of this Embedded.

        :param classifications: The classifications of this Embedded.
        :type: list[Classification]
        """

        self._classifications = classifications

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Embedded):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
