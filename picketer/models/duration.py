# coding: utf-8

"""
    Ticketmaster Discovery API

    Swagger spec based on Ticketmaster Discovery API

    OpenAPI spec version: 1.0.0
    Contact: git@edward.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Duration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, unit_millis=None, precise=None, type=None, supported=None):
        """
        Duration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'unit_millis': 'int',
            'precise': 'bool',
            'type': 'Type',
            'supported': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'unit_millis': 'unitMillis',
            'precise': 'precise',
            'type': 'type',
            'supported': 'supported'
        }

        self._name = name
        self._unit_millis = unit_millis
        self._precise = precise
        self._type = type
        self._supported = supported

    @property
    def name(self):
        """
        Gets the name of this Duration.

        :return: The name of this Duration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Duration.

        :param name: The name of this Duration.
        :type: str
        """

        self._name = name

    @property
    def unit_millis(self):
        """
        Gets the unit_millis of this Duration.

        :return: The unit_millis of this Duration.
        :rtype: int
        """
        return self._unit_millis

    @unit_millis.setter
    def unit_millis(self, unit_millis):
        """
        Sets the unit_millis of this Duration.

        :param unit_millis: The unit_millis of this Duration.
        :type: int
        """

        self._unit_millis = unit_millis

    @property
    def precise(self):
        """
        Gets the precise of this Duration.

        :return: The precise of this Duration.
        :rtype: bool
        """
        return self._precise

    @precise.setter
    def precise(self, precise):
        """
        Sets the precise of this Duration.

        :param precise: The precise of this Duration.
        :type: bool
        """

        self._precise = precise

    @property
    def type(self):
        """
        Gets the type of this Duration.

        :return: The type of this Duration.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Duration.

        :param type: The type of this Duration.
        :type: Type
        """

        self._type = type

    @property
    def supported(self):
        """
        Gets the supported of this Duration.

        :return: The supported of this Duration.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """
        Sets the supported of this Duration.

        :param supported: The supported of this Duration.
        :type: bool
        """

        self._supported = supported

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Duration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
