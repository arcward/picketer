# coding: utf-8

"""
    Ticketmaster Discovery API

    Swagger spec based on Ticketmaster Discovery API

    OpenAPI spec version: 1.0.0
    Contact: git@edward.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FieldType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, duration_type=None, range_duration_type=None, name=None, minimum_value=None, maximum_value=None, type=None, supported=None, leap_duration_field=None):
        """
        FieldType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'duration_type': 'Duration',
            'range_duration_type': 'Duration',
            'name': 'str',
            'minimum_value': 'int',
            'maximum_value': 'int',
            'type': 'Type',
            'supported': 'bool',
            'leap_duration_field': 'Duration'
        }

        self.attribute_map = {
            'duration_type': 'durationType',
            'range_duration_type': 'rangeDurationType',
            'name': 'name',
            'minimum_value': 'minimumValue',
            'maximum_value': 'maximumValue',
            'type': 'type',
            'supported': 'supported',
            'leap_duration_field': 'leapDurationField'
        }

        self._duration_type = duration_type
        self._range_duration_type = range_duration_type
        self._name = name
        self._minimum_value = minimum_value
        self._maximum_value = maximum_value
        self._type = type
        self._supported = supported
        self._leap_duration_field = leap_duration_field

    @property
    def duration_type(self):
        """
        Gets the duration_type of this FieldType.

        :return: The duration_type of this FieldType.
        :rtype: Duration
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """
        Sets the duration_type of this FieldType.

        :param duration_type: The duration_type of this FieldType.
        :type: Duration
        """

        self._duration_type = duration_type

    @property
    def range_duration_type(self):
        """
        Gets the range_duration_type of this FieldType.

        :return: The range_duration_type of this FieldType.
        :rtype: Duration
        """
        return self._range_duration_type

    @range_duration_type.setter
    def range_duration_type(self, range_duration_type):
        """
        Sets the range_duration_type of this FieldType.

        :param range_duration_type: The range_duration_type of this FieldType.
        :type: Duration
        """

        self._range_duration_type = range_duration_type

    @property
    def name(self):
        """
        Gets the name of this FieldType.

        :return: The name of this FieldType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FieldType.

        :param name: The name of this FieldType.
        :type: str
        """

        self._name = name

    @property
    def minimum_value(self):
        """
        Gets the minimum_value of this FieldType.

        :return: The minimum_value of this FieldType.
        :rtype: int
        """
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        """
        Sets the minimum_value of this FieldType.

        :param minimum_value: The minimum_value of this FieldType.
        :type: int
        """

        self._minimum_value = minimum_value

    @property
    def maximum_value(self):
        """
        Gets the maximum_value of this FieldType.

        :return: The maximum_value of this FieldType.
        :rtype: int
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """
        Sets the maximum_value of this FieldType.

        :param maximum_value: The maximum_value of this FieldType.
        :type: int
        """

        self._maximum_value = maximum_value

    @property
    def type(self):
        """
        Gets the type of this FieldType.

        :return: The type of this FieldType.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this FieldType.

        :param type: The type of this FieldType.
        :type: Type
        """

        self._type = type

    @property
    def supported(self):
        """
        Gets the supported of this FieldType.

        :return: The supported of this FieldType.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """
        Sets the supported of this FieldType.

        :param supported: The supported of this FieldType.
        :type: bool
        """

        self._supported = supported

    @property
    def leap_duration_field(self):
        """
        Gets the leap_duration_field of this FieldType.

        :return: The leap_duration_field of this FieldType.
        :rtype: Duration
        """
        return self._leap_duration_field

    @leap_duration_field.setter
    def leap_duration_field(self, leap_duration_field):
        """
        Sets the leap_duration_field of this FieldType.

        :param leap_duration_field: The leap_duration_field of this FieldType.
        :type: Duration
        """

        self._leap_duration_field = leap_duration_field

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FieldType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
