# coding: utf-8

"""
    Ticketmaster Discovery API

    Swagger spec based on Ticketmaster Discovery API

    OpenAPI spec version: 1.0.0
    Contact: git@edward.sh
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PresaleDate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, url=None, start_date_time=None, end_date_time=None):
        """
        PresaleDate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'url': 'str',
            'start_date_time': 'str',
            'end_date_time': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'url': 'url',
            'start_date_time': 'startDateTime',
            'end_date_time': 'endDateTime'
        }

        self._name = name
        self._description = description
        self._url = url
        self._start_date_time = start_date_time
        self._end_date_time = end_date_time

    @property
    def name(self):
        """
        Gets the name of this PresaleDate.

        :return: The name of this PresaleDate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PresaleDate.

        :param name: The name of this PresaleDate.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this PresaleDate.

        :return: The description of this PresaleDate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PresaleDate.

        :param description: The description of this PresaleDate.
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """
        Gets the url of this PresaleDate.

        :return: The url of this PresaleDate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this PresaleDate.

        :param url: The url of this PresaleDate.
        :type: str
        """

        self._url = url

    @property
    def start_date_time(self):
        """
        Gets the start_date_time of this PresaleDate.

        :return: The start_date_time of this PresaleDate.
        :rtype: str
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """
        Sets the start_date_time of this PresaleDate.

        :param start_date_time: The start_date_time of this PresaleDate.
        :type: str
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """
        Gets the end_date_time of this PresaleDate.

        :return: The end_date_time of this PresaleDate.
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """
        Sets the end_date_time of this PresaleDate.

        :param end_date_time: The end_date_time of this PresaleDate.
        :type: str
        """

        self._end_date_time = end_date_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PresaleDate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
